// Generated by gencpp from file drone_input_msgs/DroneControlInput.msg
// DO NOT EDIT!


#ifndef DRONE_INPUT_MSGS_MESSAGE_DRONECONTROLINPUT_H
#define DRONE_INPUT_MSGS_MESSAGE_DRONECONTROLINPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_input_msgs
{
template <class ContainerAllocator>
struct DroneControlInput_
{
  typedef DroneControlInput_<ContainerAllocator> Type;

  DroneControlInput_()
    : w(0)
    , a(0)
    , s(0)
    , d(0)
    , i(0)
    , j(0)
    , k(0)
    , l(0)  {
    }
  DroneControlInput_(const ContainerAllocator& _alloc)
    : w(0)
    , a(0)
    , s(0)
    , d(0)
    , i(0)
    , j(0)
    , k(0)
    , l(0)  {
  (void)_alloc;
    }



   typedef int8_t _w_type;
  _w_type w;

   typedef int8_t _a_type;
  _a_type a;

   typedef int8_t _s_type;
  _s_type s;

   typedef int8_t _d_type;
  _d_type d;

   typedef int8_t _i_type;
  _i_type i;

   typedef int8_t _j_type;
  _j_type j;

   typedef int8_t _k_type;
  _k_type k;

   typedef int8_t _l_type;
  _l_type l;





  typedef boost::shared_ptr< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> const> ConstPtr;

}; // struct DroneControlInput_

typedef ::drone_input_msgs::DroneControlInput_<std::allocator<void> > DroneControlInput;

typedef boost::shared_ptr< ::drone_input_msgs::DroneControlInput > DroneControlInputPtr;
typedef boost::shared_ptr< ::drone_input_msgs::DroneControlInput const> DroneControlInputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_input_msgs::DroneControlInput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_input_msgs::DroneControlInput_<ContainerAllocator1> & lhs, const ::drone_input_msgs::DroneControlInput_<ContainerAllocator2> & rhs)
{
  return lhs.w == rhs.w &&
    lhs.a == rhs.a &&
    lhs.s == rhs.s &&
    lhs.d == rhs.d &&
    lhs.i == rhs.i &&
    lhs.j == rhs.j &&
    lhs.k == rhs.k &&
    lhs.l == rhs.l;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_input_msgs::DroneControlInput_<ContainerAllocator1> & lhs, const ::drone_input_msgs::DroneControlInput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_input_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6513e4e1c03e5976bc99005c604e739";
  }

  static const char* value(const ::drone_input_msgs::DroneControlInput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6513e4e1c03e597ULL;
  static const uint64_t static_value2 = 0x6bc99005c604e739ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_input_msgs/DroneControlInput";
  }

  static const char* value(const ::drone_input_msgs::DroneControlInput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Cyclic controls\n"
"int8 w\n"
"int8 a\n"
"int8 s\n"
"int8 d\n"
"\n"
"# Pedals\n"
"int8 i\n"
"int8 j\n"
"int8 k\n"
"int8 l\n"
;
  }

  static const char* value(const ::drone_input_msgs::DroneControlInput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.w);
      stream.next(m.a);
      stream.next(m.s);
      stream.next(m.d);
      stream.next(m.i);
      stream.next(m.j);
      stream.next(m.k);
      stream.next(m.l);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DroneControlInput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_input_msgs::DroneControlInput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_input_msgs::DroneControlInput_<ContainerAllocator>& v)
  {
    s << indent << "w: ";
    Printer<int8_t>::stream(s, indent + "  ", v.w);
    s << indent << "a: ";
    Printer<int8_t>::stream(s, indent + "  ", v.a);
    s << indent << "s: ";
    Printer<int8_t>::stream(s, indent + "  ", v.s);
    s << indent << "d: ";
    Printer<int8_t>::stream(s, indent + "  ", v.d);
    s << indent << "i: ";
    Printer<int8_t>::stream(s, indent + "  ", v.i);
    s << indent << "j: ";
    Printer<int8_t>::stream(s, indent + "  ", v.j);
    s << indent << "k: ";
    Printer<int8_t>::stream(s, indent + "  ", v.k);
    s << indent << "l: ";
    Printer<int8_t>::stream(s, indent + "  ", v.l);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_INPUT_MSGS_MESSAGE_DRONECONTROLINPUT_H
